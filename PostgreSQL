/* Find team id for particular teams */

SELECT
	-- Select the team long name and team API id
	team_long_name,
	team_api_id
FROM team
-- Only include FC Schalke 04 and FC Bayern Munich
WHERE team_long_name IN ('FC Schalke 04','FC Bayern Munich');
-- FC Schalke 04 or FC Bayern Munich
WHERE team_long_name = 'FC Schalke 04/FC Bayern Munich';


/* Identify if a match included Bayern Munich, Schalke 04, or neither */
SELECT 
	CASE WHEN hometeam_id = 10189 OR awayteam_id = 10189 THEN 'FC Schalke 04'
        WHEN hometeam_id = 9823 OR awayteam_id = 9823 THEN 'FC Bayern Munich'
         ELSE 'Other' END AS team_name,
	COUNT(id) AS matches
FROM match
WHERE country_id = 7809
-- Group by the CASE statement
GROUP BY  
	CASE WHEN hometeam_id = 10189 OR awayteam_id = 10189 THEN 'FC Schalke 04'
        WHEN hometeam_id = 9823 OR awayteam_id = 9823 THEN 'FC Bayern Munich'
        ELSE 'Other' END;


-- Select the season, date, home_goal, and away_goal columns
SELECT 
	season,
    date,
	home_goal,
	away_goal
FROM match
WHERE 
-- Exclude games not played by Bologna
	CASE WHEN hometeam_id = 9857 AND home_goal > away_goal THEN 'Bologna Win'
		WHEN awayteam_id = 9857 AND away_goal > home_goal THEN 'Bologna Win' END
		IS NOT NULL;



/*Do the number of soccer matches played a given European country differ across seasons? */

SELECT 
	c.name AS country,
    -- Count all games from the 2013, 2014, and 2015 seasons
	COUNT(CASE WHEN m.season = '2012/2013' THEN m.id END) AS matches_2012_2013,
	COUNT(CASE WHEN m.season = '2013/2014' THEN m.id END) AS matches_2013_2014,
	COUNT(CASE WHEN m.season = '2014/2015' THEN m.id END) AS matches_2014_2015
-- Join the match table onto the country table
FROM country AS c
LEFT JOIN match AS m
ON c.id = m.country_id
GROUP BY c.id;


/*count only when it won the game */
SELECT 
	c.name AS country,
    -- Sum the total records in each season where the home team won
	SUM(CASE WHEN m.season = '2012/2013' AND m.home_goal > m.away_goal 
        THEN 1 ELSE 0 END) AS matches_2012_2013,
 	SUM(CASE WHEN m.season = '2013/2014' AND home_goal > m.away_goal 
        THEN 1 ELSE 0 END) AS matches_2013_2014,
	SUM(CASE WHEN m.season = '2014/2015' AND m.home_goal > m.away_goal 
        THEN 1 ELSE 0 END) AS matches_2014_2015
FROM country AS c
LEFT JOIN match AS m
ON c.id = m.country_id
GROUP BY c.name;


/*calculating the percentage */
SELECT 
	c.name AS country,
    -- Calculate the percentage of tied games in the 2014 and 2015 seasons
	ROUND(AVG(CASE WHEN m.season='2013/2014' AND m.home_goal = m.away_goal THEN 1
			WHEN m.season='2013/2014' AND m.home_goal != m.away_goal THEN 0 
			END)*100,2) AS ties_2014,
	ROUND(AVG(CASE WHEN m.season='2014/2015' AND m.home_goal = m.away_goal THEN 1
			WHEN m.season='2014/2015' AND m.home_goal != m.away_goal THEN 0 
			END)*100,2) AS ties_2015
FROM country AS c
LEFT JOIN match AS m
ON c.id = m.country_id
GROUP BY c.name;



/* Filter the matches where total goals exceeds 3x the average */
SELECT 
	-- Select the date, home team and away team ID/goals scored
    date,
	hometeam_id,
	awayteam_id,
	home_goal,
	away_goal
FROM  match
WHERE 
	season = '2013/2014'

	AND (home_goal + away_goal) > 
        (SELECT 3 * AVG(home_goal + away_goal)
         FROM match); 


/*Find countries that had matches in the database where 10 or more goals were scored overall.  Using two databases: country, match */
SELECT
	-- Select country name, season, and the count of match IDs
    c.name AS country,
    COUNT(m.id) AS matches
FROM country AS c
-- Inner join the subquery onto country
-- Select the country id and match id columns
INNER JOIN (SELECT country_id, id 
           FROM match
           -- Filter the subquery by matches with 10 or more goals
           WHERE (home_goal + away_goal) >=10) AS m
ON c.id = m.country_id
GROUP BY c.name;



/*Find out some more details about those matches -- when they were played, during which seasons, and how many of the goals were home vs. away goals. */
SELECT
	-- Select country, date, home, and away goals from the subquery
    country,
    date,
    home_goal,
    away_goal
FROM 
	-- Select country name, date, and total goals in the subquery
	(SELECT c.name AS country, 
     	    m.date, 
     		m.home_goal, 
     		m.away_goal,
           (m.home_goal + m.away_goal) AS total_goals
    FROM match AS m
    LEFT JOIN country AS c
    ON m.country_id = c.id) AS subq
-- Filter by total goals scored in the main query
WHERE total_goals >= 10;


/*compare each league's average total goals to the overall average goals in the 2013/2014 season. */

SELECT 
	l.name AS league,
    -- Select and round the league's total goals
    ROUND(AVG(m.home_goal + m.away_goal), 2) AS avg_goals,
    -- Select & round the average total goals for the season
    (SELECT ROUND(AVG(home_goal + away_goal), 2) 
     FROM match
     WHERE season = '2013/2014') AS overall_avg
FROM league AS l
LEFT JOIN match AS m
ON l.country_id = m.country_id
-- Filter for the 2013/2014 season
WHERE season = '2013/2014'
GROUP BY l.name;


 /* add a column that directly compares these values by subtracting the overall average from the subquery. */

SELECT
	l.name AS league,
	ROUND(AVG(m.home_goal + m.away_goal),2) AS avg_goals,
    -- Subtract the overall average from the league average
	ROUND(AVG(m.home_goal + m.away_goal) - 
		(SELECT AVG(home_goal + away_goal)
		 FROM match 
         WHERE season = '2013/2014'),2) AS diff
FROM league AS l
LEFT JOIN match AS m
ON l.country_id = m.country_id
-- Only include 2013/2014 results
WHERE season = '2013/2014'
GROUP BY l.name;


/* how the average home and away goals scored changes across match stages. Do teams score more or less as the stakes get higher? */

SELECT 
	-- Select the stage and average goals for each stage
	m.stage,
    ROUND(AVG(m.home_goal + m.away_goal),2) AS avg_goals,
    -- Select the average overall goals for the 2012/2013 season
    ROUND((SELECT AVG(home_goal + away_goal) 
           FROM match 
           WHERE season = '2012/2013'),2) AS overall
FROM match AS m
WHERE season = '2012/2013'
GROUP BY m.stage
ORDER BY m.stage;

# or

SELECT 
	-- Select the stage and average goals from s
	s.stage,
    ROUND(s.avg_goal,2) AS avg_goals,
    -- Select the overall average for 2012/2013
    (SELECT AVG(home_goal + away_goal) FROM match WHERE season = '2012/2013') AS overall_avg
FROM 
	-- Select the stage and average goals in 2012/2013 from match
	(SELECT
		 stage,
         AVG(home_goal + away_goal) AS avg_goals
	 FROM match
	 WHERE season = '2012/2013'
	 GROUP BY stage) AS s
WHERE 
	-- Filter the main query using the subquery
	s.avg_goals > (SELECT AVG(home_goal + away_goal) 
                    FROM match WHERE season = '2012/2013')
ORDER BY s.stage;


/* Examine matches with scores that are extreme outliers for each country-- which are above 3 times the average score */
SELECT 
	-- Select country ID, date, home, and away goals from match
	main.country_id,
    main.date,
    main.home_goal, 
    main.away_goal
FROM match AS main
WHERE 
	-- Filter the main query by the subquery
	(home_goal + away_goal) > 
        (SELECT AVG((sub.home_goal + sub.away_goal) * 3)
         FROM match AS sub
         -- Join the main query to the subquery in WHERE
         WHERE main.country_id = sub.country_id);


/* what was the highest scoring match for each country, in each season? */

SELECT 
	-- Select country ID, season, home, and away goals from match
	main.country_id,
    main.date,
    main.home_goal,
    main.away_goal
FROM match AS main
WHERE 
	-- Filter for matches with the highest number of goals scored
	(home_goal + away_goal) = 
        (SELECT MAX(sub.home_goal + sub.away_goal)
         FROM match AS sub
         WHERE main.country_id = sub.country_id
               AND main.season = sub.season);


/* examine the highest total number of goals in each season, overall, and during July across all seasons. (first col is different across seasons, the 2 and 3 cols are same) */

SELECT
	-- Select the season and max goals scored in a match
	season,
    MAX(home_goal + away_goal) AS max_goals,
    -- Select the overall max goals scored in a match
   (SELECT MAX(home_goal + away_goal) FROM match) AS overall_max,
   -- Select the max number of goals scored in any match in July
   (SELECT MAX(home_goal + away_goal) 
    FROM match
    WHERE id IN (
          SELECT id FROM match WHERE EXTRACT(MONTH FROM date) = 07)) AS july_max
FROM match
GROUP BY season;



/*What is the average monthly maximum of goals in each season, and which season has the highest monthly max average? */

SELECT
	-- Select the season and max home, away, total averages
    sub2.season,
    MAX(sub2.avg_max_home) AS max_home_avg,
    MAX(sub2.avg_max_away) AS max_away_avg,
    MAX(sub2.total_goals) AS max_total_avg
FROM
	-- Select the season, average max and average total goals
	(SELECT 
     	 sub1.season,
     	 AVG(sub1.max_home) AS avg_max_home, 
     	 AVG(sub1.max_away) AS avg_max_away,
         AVG(sub1.max_home + sub1.max_away) AS total_goals
    FROM
     	-- Select the season, month, and max of home/away goals
     	(SELECT
        	m.season,
        	EXTRACT(month FROM m.date) AS month,
        	MAX(m.home_goal) AS max_home,
        	MAX(m.away_goal) AS max_away
         FROM match AS m
         GROUP BY m.season, EXTRACT(month FROM m.date)) AS sub1
    GROUP BY sub1.season) AS sub2
GROUP BY sub2.season
ORDER BY max_total_avg DESC;




/*created both CTEs matching the team ID to the home and away team names.*/
-- Create home team CTE
WITH home AS (
    -- Select the match id and team long name
    SELECT m.id, t.team_long_name
    FROM match AS m
    LEFT JOIN team AS t ON m.hometeam_id = t.team_api_id),
-- Create away team CTE. 
away AS (
    -- Select the match id and team long name
    SELECT m.id, t.team_long_name
    FROM match AS m
    LEFT JOIN team AS t ON m.awayteam_id = t.team_api_id)
-- Select the stage, date, home and away teams
SELECT 
	m.stage,
    m.date,
    home.team_long_name AS home_team,
    away.team_long_name AS away_team,
    m.home_goal,
    m.away_goal
FROM match AS m
-- Join the CTEs onto the match table
LEFT JOIN home ON home.id = m.id
LEFT JOIN away ON away.id = m.id
WHERE m.season = '2014/2015';


/*examples for using Window functions */


-- Use a window to include the aggregate average in each row
SELECT 
	m.id, 
    c.name AS country, 
    m.season,
	m.home_goal,
	m.away_goal,
	AVG(m.home_goal + m.away_goal) OVER() AS overall_avg
FROM match AS m
LEFT JOIN country AS c ON m.country_id = c.id;


 /* create a data set of ranked matches according to which leagues, on average, score the most goals in a match. */
SELECT 
	-- Select the league name and average goals scored
	l.name AS league,
    AVG(m.home_goal + m.away_goal) AS avg_goals,
    -- Rank leagues in descending order by average goals
    RANK() OVER(ORDER BY AVG(m.home_goal + m.away_goal) DESC) AS league_rank
FROM league AS l
LEFT JOIN match AS m 
ON l.id = m.country_id
WHERE m.season = '2011/2012'
GROUP BY l.name
-- Order the query by the rank you created
ORDER BY league_rank;



/*calculate the average number home and away goals scored Legia Warszawa, and their opponents, partitioned by the month in each season.*/
SELECT 
	-- Select the date, season, home, and away goals
	date,
	season,
	home_goal,
	away_goal,
	CASE WHEN hometeam_id = 8673 THEN 'home' 
         ELSE 'away' END AS warsaw_location,
	-- Calculate average goals partitioned by season and month
    AVG(home_goal) OVER(PARTITION BY season,
         	EXTRACT(month FROM date)) AS season_mo_home,
    AVG(away_goal) OVER(PARTITION BY season, 
            EXTRACT(month FROM date)) AS season_mo_away
FROM match
WHERE hometeam_id = 8673 OR awayteam_id = 8673
ORDER BY (home_goal + away_goal) DESC;


/* Examples for using sliding window */

/*calculating the running total of goals scored by the FC Utrecht when they were the home team during the 2011/2012 season. Do they score more goals at the end of the season as the home or away team? */
SELECT 
	-- Select the date, home goal, and away goals
	date,
    home_goal,
    away_goal,
    -- Create a running total and running average of home goals
    SUM(home_goal) OVER(ORDER BY date 
         ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS running_total,
    AVG(home_goal) OVER(ORDER BY date 
         ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS running_avg
FROM match
WHERE 
	hometeam_id = 9908 
	AND season = '2011/2012';
  
  
/*sorting the data set in reverse order and calculating a backward running total from the CURRENT ROW to the end of the data set (earliest record).*/
SELECT 
	-- Select the date, home goal, and away goals
	date,
    home_goal,
    away_goal,
    -- Create a running total and running average of home goals
    SUM(away_goal) OVER(ORDER BY date DESC
         ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING) AS running_total,
    AVG(away_goal) OVER(ORDER BY date DESC
         ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING) AS running_avg
FROM match
WHERE awayteam_id = 9908 AND season = '2011/2012';


/*generate a list of matches in which Manchester United was defeated during the 2014/2015 English Premier League season*/
-- Set up the home team CTE
WITH home AS (
  SELECT m.id, t.team_long_name,
	     CASE WHEN m.home_goal > m.away_goal THEN 'Home Team Win'
		     WHEN m.home_goal < m.away_goal THEN 'Away Team Win' 
             ELSE 'Tie' END AS outcome
  FROM match AS m
  LEFT JOIN team AS t ON m.hometeam_id = t.team_api_id),
-- Set up the away team CTE
away AS (
  SELECT m.id, t.team_long_name,
	     CASE WHEN m.home_goal > m.away_goal THEN 'Home Team Win'
		     WHEN m.home_goal < m.away_goal THEN 'Away Team Win' 
             ELSE 'Tie' END AS outcome
  FROM match AS m
  LEFT JOIN team AS t ON m.awayteam_id = t.team_api_id)
-- Select columns and and rank the matches by date
SELECT DISTINCT
    m.date,
    home.team_long_name AS home_team,
    away.team_long_name AS away_team,
    m.home_goal, m.away_goal,
    RANK() OVER(ORDER BY date) as date_rank
-- Join the CTEs onto the match table
FROM match AS m
LEFT JOIN home ON m.id = home.id
LEFT JOIN away ON m.id = away.id
WHERE m.season = '2014/2015'
      AND ((home.team_long_name = 'Manchester United' AND home.outcome = 'Away Team Win')
      OR (away.team_long_name = 'Manchester United' AND away.outcome = 'Home Team Win'));














